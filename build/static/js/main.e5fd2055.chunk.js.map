{"version":3,"sources":["components/Intro/index.js","components/Navbar/index.js","components/Card/index.js","components/Cards/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["Intro","props","react_default","a","createElement","className","Nav","hint","currentScore","topScore","defaultProps","Card","id","onClick","src","imgUrl","alt","width","height","shuffle","require","Cards","state","cards","alreadyClickedId","cardClick","_this","includes","setState","push","_this2","this","Navbar","map","x","components_Card","imageUrl","React","Component","Footer","App","components_Intro","components_Cards","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uyBAWeA,MARf,SAAeC,GACb,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,mBACjBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,gBACAH,EAAAC,EAAAC,cAAA,gICJF,SAASE,EAAIL,GACX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,eACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeJ,EAAMM,MACpCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,UAAsCJ,EAAMO,aAA5C,kBAAyEP,EAAMQ,WAIrFH,EAAII,aAAe,CACjBH,KAAI,2BACJC,aAAc,EACdC,SAAU,GAGGH,cCHAK,MAZf,SAAcV,GACZ,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWO,GAAIX,EAAMW,GAAIC,QAAS,kBAAMZ,EAAMY,QAAQZ,EAAMW,MACzEV,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMc,OAAQC,IAAI,OAAOC,MAAQ,QAAQC,OAAS,mBCD9DC,SAAUC,EAAQ,KAsEPC,6MAhEbC,MAAQ,CACNf,KAAI,2BACJC,aAAc,EACdC,SAAU,EACVc,QACAC,iBAAmB,MAGrBC,UAAY,SAACb,GAIPc,EAAKJ,MAAME,iBAAiBG,SAASf,GAEvCc,EAAKE,SAAS,CAACrB,KAAK,2BAA4BC,aAAa,EAAGgB,iBAAiB,MAIjFE,EAAKE,SAAS,CAACrB,KAAK,2BACpBmB,EAAKE,SAAS,CAACpB,aAAakB,EAAKJ,MAAMd,aAAa,IAEhDkB,EAAKJ,MAAMb,SAASiB,EAAKJ,MAAMd,aAAa,GAC9CkB,EAAKE,SAAS,CAACnB,SAASiB,EAAKJ,MAAMd,aAAa,IAGlDkB,EAAKJ,MAAME,iBAAiBK,KAAKjB,IAI/Bc,EAAKJ,MAAMd,aAAa,IAAM,IAChCkB,EAAKE,SAAS,CAACrB,KAAK,WAAYC,aAAa,EAAGgB,iBAAiB,KAGnEE,EAAKE,SAAS,CAACL,MAAMJ,EAAQO,EAAKJ,MAAMC,kFAIjC,IAAAO,EAAAC,KACP,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAY,SACfH,EAAAC,EAAAC,cAAC4B,EAAD,CACEzB,KAAQwB,KAAKT,MAAMf,KACnBC,aAAcuB,KAAKT,MAAMd,aACzBC,SAAYsB,KAAKT,MAAMb,WAEzBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACZ0B,KAAKT,MAAMC,MAAMU,IAAI,SAAAC,GAAC,OACrBhC,EAAAC,EAAAC,cAAC+B,EAAD,CACEvB,GAAIsB,EAAEtB,GACNG,OAAQmB,EAAEE,SACVvB,QAASiB,EAAKL,uBApDRY,IAAMC,iBCGXC,MATf,WACE,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,iBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,gBAAjB,eAA4CH,EAAAC,EAAAC,cAAA,OAAKU,IAAK,qBAAsBE,IAAI,aAAaX,UAAY,YCS/FmC,MATf,WACE,OACEtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,MACAxC,EAAAC,EAAAC,cAACuC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhD,EAAAC,EAAAC,cAAC+C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e5fd2055.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Intro(props) {\n  return (\n  <div className = \"Intro-paragraph\">\n  <h1 className=\"Intro-title\">Clicky Game!</h1>\n  <p>Click on an image to earn points, but don't click on any more than once!</p>\n  </div>);\n}\n\nexport default Intro;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return (\n    <div className=\"nav\">\n      <div className=\"brand navbar\">Clicky Game</div>\n      <div className=\"hint navbar\">{props.hint}</div>\n      <div className=\"score navbar\">Score: {props.currentScore} | Top Score : {props.topScore}</div>\n    </div>);\n};\n\nNav.defaultProps = {\n  hint: `Click an image to begin!`,\n  currentScore: 0,\n  topScore: 0\n}\n\nexport default Nav; ","import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n  return (\n    <div className=\"one-card\" id={props.id} onClick={() => props.onClick(props.id)}>\n      <img src={props.imgUrl} alt=\"card\" width = \"180px\" height = \"180px\"></img>\n    </div>);\n};\n\n// Card.defaultProps = {\n//   id: 1,\n//   imgUrl: \"https://www.google.com/imgres?imgurl=https%3A%2F%2Fimages.pexels.com%2Fphotos%2F67636%2Frose-blue-flower-rose-blooms-67636.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D1%26w%3D500&imgrefurl=https%3A%2F%2Fwww.pexels.com%2Fsearch%2Fflower%2F&docid=5UbOpOqf9qM23M&tbnid=CJwabmfmxl2ySM%3A&vet=10ahUKEwjm-MOz6qPjAhWHAnwKHSVyCnMQMwh-KAEwAQ..i&w=500&h=331&bih=535&biw=1254&q=image&ved=0ahUKEwjm-MOz6qPjAhWHAnwKHSVyCnMQMwh-KAEwAQ&iact=mrc&uact=8\",\n// }\n\nexport default Card; ","import React from \"react\";\nimport Nav from \"../Navbar\";\nimport Card from \"../Card\"; \nimport cards from \"../../clickycards.json\"; \nimport \"./style.css\"; \nvar shuffle = require('shuffle-array'); \n\n\n// By extending the React.Component class, Counter inherits functionality from it\nclass Cards extends React.Component {\n  // Setting the initial state of the component\n  state = {\n    hint: `Click an image to begin!`,\n    currentScore: 0,\n    topScore: 0,\n    cards,\n    alreadyClickedId : [],\n  };\n  \n  cardClick = (id) => {\n    // We always use the setState method to update a component's state\n    // this.setState({ hint: id });\n    // if the image / id is already clicked \n    if (this.state.alreadyClickedId.includes(id)){\n      //reset the game \n      this.setState({hint:\"You guessed incorrectly!\", currentScore:0, alreadyClickedId:[]});\n    }\n    // if guessed correctly \n    else{\n      this.setState({hint:\"You guessed correctly!\"});\n      this.setState({currentScore:this.state.currentScore+1});\n      // update the top score only when it's smaller than current score \n      if (this.state.topScore<this.state.currentScore+1){\n        this.setState({topScore:this.state.currentScore+1})\n      }\n      // push the currently guessed id to the aready guessed id array \n      this.state.alreadyClickedId.push(id); \n    }\n    // the condition of wining\n    // because react is slow in updating scores so there is a +1\n    if (this.state.currentScore+1 === 12){\n      this.setState({hint:\"You win!\", currentScore:0, alreadyClickedId:[]}); \n    }\n    // npm shuffle package (shuffle an array)\n    this.setState({cards:shuffle(this.state.cards)}); \n  };\n\n  // The render method returns the JSX that should be rendered\n  render() {\n    return (\n      <div className = \"cards\">\n        <Nav \n          hint = {this.state.hint}\n          currentScore={this.state.currentScore}\n          topScore = {this.state.topScore}/>\n          \n        <div className=\"cards-container\">\n          {this.state.cards.map(x => (\n            <Card\n              id={x.id}\n              imgUrl={x.imageUrl} \n              onClick={this.cardClick}\n            />\n          ))}\n          {/* <Card\n              onClick={this.cardClick}\n              id= \"3\"\n              imgUrl=\"https://images.pexels.com/photos/414612/pexels-photo-414612.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260\"\n            /> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Cards;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <div className = \"footer\">\n     <div className = \"upper-footer\"></div>\n     <div className = \"lower-footer\">Clicky Game!<img src =\"React-icon.svg.png\"  alt=\"react icon\" className = \"icon\"></img></div>\n    </div>);\n};\n\n\nexport default Footer; ","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Intro from \"./components/Intro\";\nimport Cards from \"./components/Cards\";\nimport Footer from \"./components/Footer\"; \n\nfunction App() {\n  return (\n    <div>\n      <Intro />\n      <Cards />\n      <Footer />\n    </div>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}